{"version":3,"sources":["redux/actions/game.js","components/user-config/UserConfig.js","components/message/Message.js","components/game-area/GameArea.js","components/playing-field/PlayingField.js","redux/actions/board.js","components/leader-board/LeaderBoard.js","redux/reducers/game.js","redux/reducers/board.js","redux/reducers/rootReducer.js","redux/sagas/index.js","redux/store/store.js","index.js"],"names":["GAME_MODE","CHANGE_NAME","GET_GAME_CONFIG","SET_GAME_CONFIG","SECTION_CHANGE","GAME_OVER","setGameConfig","config","userName","type","enhance","connect","game","mode","gameIsOn","gameMode","changeName","value","getGameConfig","handleChangeMode","e","props","target","dataset","handleChangeName","startPlay","this","toUpperCase","slice","replace","className","Dropdown","DropdownButton","id","title","Item","onClick","data-mode","FormControl","placeholder","onBlur","Button","variant","disabled","React","Component","error","message","style","color","sectionChange","newSchema","gameOver","winner","resetGameData","setGameplay","delay","gameSchema","clearTimeout","gameInterval","setTimeout","defferedSchema","JSON","parse","stringify","checkPrevSection","gameLogic","defferedSectionChange","undefined","randX","randY","compPoints","length","Math","floor","random","userPoints","halfSections","flatGameSchema","flat","includes","randCoord","map","item","index","el","i","sectionClass","click","classList","add","classname","classnames","height","area","createArea","PlayingField","GET_RESULTS","SET_RESULTS","board","getResults","state","currentPage","page","setState","selected","results","pageCount","ListGroup","reverse","result","date","pageRangeDisplayed","marginPagesDisplayed","previousLabel","nextLabel","onPageChange","clickPage","containerClassName","previousClassName","nextClassName","disabledClassName","pageClassName","pageLinkClassName","activeLinkClassName","initState","action","field","arr","j","push","rootReducer","combineReducers","sagaWatcher","gameWorker","boardWorker","takeEvery","select","store","axios","get","difficult","put","data","Date","minutes","getMinutes","hours","getHours","dateAndTime","getDate","getMonth","getFullYear","post","boardData","sagaMiddleware","createSagaMiddlware","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5faa8404.chunk.js","sourcesContent":["export const GAME_MODE = 'GAME_MODE';\r\nexport const CHANGE_NAME = 'CHANGE_NAME';\r\nexport const GET_GAME_CONFIG = 'GET_GAME_CONFIG';\r\nexport const SET_GAME_CONFIG = 'SET_GAME_CONFIG';\r\nexport const SECTION_CHANGE = 'SECTION_CHANGE';\r\nexport const GAME_OVER = 'GAME_OVER';\r\n\r\nexport function gameMode(mode) {\r\n    return { type: GAME_MODE, mode };\r\n}\r\n\r\nexport function changeName(value) {\r\n    return { type: CHANGE_NAME, value };\r\n}\r\n\r\nexport function getGameConfig() {\r\n    return { type: GET_GAME_CONFIG };\r\n}\r\n\r\nexport function setGameConfig(config, userName) {\r\n    return { type: SET_GAME_CONFIG, config, userName };\r\n}\r\n\r\nexport function sectionChange(newSchema) {\r\n    return { type: SECTION_CHANGE, newSchema };\r\n}\r\n\r\nexport function gameOver(winner) {\r\n    return { type: GAME_OVER, winner };\r\n}","import React from 'react';\r\nimport './UserConfig.css';\r\n\r\nimport { DropdownButton, Dropdown, FormControl, Button } from 'react-bootstrap';\r\n\r\nimport { gameMode, changeName, getGameConfig } from 'redux/actions/game';\r\nimport { connect } from 'react-redux';\r\n\r\nconst enhance = connect(\r\n    ({ game }) => ({ mode: game.mode, gameIsOn: game.gameIsOn }),\r\n    { gameMode, changeName, getGameConfig }\r\n)\r\n\r\nclass UserConfig extends React.Component {\r\n\r\n    handleChangeMode = (e) => this.props.gameMode(e.target.dataset.mode);\r\n    handleChangeName = (e) => this.props.changeName(e.target.value);\r\n    startPlay = () => this.props.getGameConfig();\r\n\r\n    render() {\r\n        const { mode, gameIsOn } = this.props;\r\n        const gameMode = mode && (mode[0].toUpperCase() + mode.slice(1)).replace('Mode', '');\r\n\r\n        return (\r\n            <div className=\"config\">\r\n                <Dropdown>\r\n                    <DropdownButton\r\n                        id=\"dropdown-basic-button\"\r\n                        title={gameMode ? gameMode : \"Pick game mode\"}\r\n                    >\r\n                        <Dropdown.Item onClick={(e) => this.handleChangeMode(e)} data-mode=\"easyMode\">Easy</Dropdown.Item>\r\n                        <Dropdown.Item onClick={(e) => this.handleChangeMode(e)} data-mode=\"normalMode\">Normal</Dropdown.Item>\r\n                        <Dropdown.Item onClick={(e) => this.handleChangeMode(e)} data-mode=\"hardMode\">Hard</Dropdown.Item>\r\n                    </DropdownButton>\r\n                </Dropdown>\r\n                <FormControl\r\n                    placeholder=\"Enter your name\"\r\n                    onBlur={(e) => this.handleChangeName(e)}\r\n                />\r\n                <Button\r\n                    variant=\"success\"\r\n                    onClick={() => this.startPlay()}\r\n                    disabled={gameIsOn}\r\n                >\r\n                    {gameIsOn === false ? 'Play again' : 'Play'}\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default enhance(UserConfig);","import React from 'react';\r\nimport './Message.css';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nconst enhance = connect(\r\n    ({ game }) => game\r\n);\r\n\r\nclass Message extends React.Component {\r\n    render() {\r\n        const { error, message } = this.props;\r\n\r\n        return(\r\n            <div style={error ? {color: 'red'} : {}}>{error ? error : message}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default enhance(Message);","import React from 'react';\r\nimport './GameArea.css';\r\n\r\nimport classnames from 'classnames';\r\n\r\nimport { sectionChange, gameOver } from 'redux/actions/game';\r\nimport { connect } from 'react-redux';\r\n\r\nconst enhance = connect(\r\n    ({ game }) => game,\r\n    { sectionChange, gameOver }\r\n);\r\n\r\nclass GameArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.resetGameData();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.setGameplay();\r\n    }\r\n\r\n    setGameplay() {\r\n        const { gameIsOn, delay, gameSchema } = this.props;\r\n        \r\n        if (gameIsOn) {\r\n            clearTimeout(this.gameInterval);\r\n            this.gameInterval = setTimeout(() => {\r\n                this.defferedSchema = JSON.parse(JSON.stringify(gameSchema));\r\n                this.checkPrevSection();\r\n                this.gameLogic();\r\n                this.defferedSectionChange();\r\n            }, delay);\r\n        } else if (gameIsOn !== null) {\r\n            clearTimeout(this.gameInterval);\r\n            this.resetGameData();\r\n        }\r\n    }\r\n\r\n    checkPrevSection() {\r\n        const { gameSchema } = this.props;\r\n        \r\n        if (this.randX !== undefined && this.randY !== undefined) {\r\n            if (gameSchema[this.randX][this.randY] === 'O') {\r\n                this.defferedSchema[this.randX][this.randY] = '-';\r\n                this.compPoints++;\r\n            }\r\n        }\r\n    }\r\n\r\n    defferedSectionChange() {\r\n        const { sectionChange } = this.props;\r\n\r\n        if (this.defferedSchema.length) {\r\n            sectionChange(this.defferedSchema);\r\n        }\r\n    }\r\n\r\n    randCoord() {\r\n        const { gameSchema } = this.props;\r\n        \r\n        while (gameSchema[this.randX][this.randY] !== '.') {\r\n            this.randX = Math.floor(Math.random() * gameSchema.length);\r\n            this.randY = Math.floor(Math.random() * gameSchema.length);\r\n        }        \r\n    }\r\n\r\n    resetGameData() {\r\n        this.userPoints = 0;\r\n        this.compPoints = 0;\r\n        this.defferedSchema = [];\r\n        this.randX = Math.floor(Math.random() * 5);\r\n        this.randY = Math.floor(Math.random() * 5);\r\n    }\r\n\r\n    gameLogic() {\r\n        const { gameSchema,\r\n                gameOver,\r\n                userName } = this.props;\r\n        const halfSections = gameSchema.length**2 / 2;\r\n        const flatGameSchema = gameSchema.flat();\r\n        \r\n        if (this.userPoints > halfSections) {\r\n            this.defferedSectionChange();\r\n            gameOver(userName);\r\n            return;\r\n        } else if (this.compPoints > halfSections) {\r\n            this.defferedSectionChange();\r\n            gameOver('Computer');\r\n            return;\r\n        } else if (this.userPoints === halfSections && this.compPoints === halfSections) {\r\n            this.defferedSectionChange();\r\n            gameOver('Nobody');\r\n            return;\r\n        }\r\n\r\n        if (flatGameSchema.includes('.')) {\r\n            this.randCoord();\r\n        }\r\n\r\n        this.defferedSchema[this.randX][this.randY] = 'O';\r\n    }\r\n\r\n    createArea(gameSchema) {\r\n        return gameSchema.map((item, index) => {\r\n            return(\r\n                <div key={index} className=\"area__row\">\r\n                    {item.map((el, i) => {\r\n                        let sectionClass = '';\r\n                        let click = null;\r\n\r\n                        switch (el) {\r\n                            case 'O':\r\n                                sectionClass = 'area__col--illuminated';\r\n                                click = (e) => {\r\n                                    e.target.classList.add('area__col--user');\r\n                                    this.defferedSchema[index][i] = '+';\r\n                                    this.userPoints++;\r\n                                }\r\n                                break;\r\n\r\n                            case '+':\r\n                                sectionClass = 'area__col--user';\r\n                                break;\r\n\r\n                            case '-':\r\n                                sectionClass = 'area__col--comp';\r\n                                break;\r\n                                \r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n                        const classname = classnames('area__col', sectionClass)\r\n                        return <div\r\n                                    key={i}\r\n                                    className={classname}\r\n                                    style={{ height: `calc(600px / ${gameSchema.length})` }}\r\n                                    onClick={click}\r\n                                />\r\n                    })}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { gameSchema } = this.props;\r\n        const area = gameSchema.length ? this.createArea(gameSchema) : <div className=\"area__empty\"></div>;\r\n\r\n        return(\r\n            <div className=\"area\">{area}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default enhance(GameArea);","import React from 'react';\r\nimport './PlayingField.css';\r\n\r\nimport UserConfig from 'components/user-config/UserConfig';\r\nimport Message from 'components/message/Message';\r\nimport GameArea from 'components/game-area/GameArea';\r\n\r\nconst PlayingField = () => (\r\n    <div className=\"playing-field\">\r\n        <div className=\"playing-field__holder\">\r\n            <UserConfig />\r\n            <Message />\r\n            <GameArea />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default PlayingField;","export const GET_RESULTS = 'GET_RESULTS';\r\nexport const SET_RESULTS = 'SET_RESULTS';\r\n\r\nexport function getResults() {\r\n    return { type: GET_RESULTS };\r\n}\r\n\r\nexport function setResults(results) {\r\n    return { type: SET_RESULTS, results};\r\n}","import React from 'react';\r\nimport './LeaderBoard.css';\r\n\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport { getResults } from 'redux/actions/board';\r\nimport { connect } from 'react-redux';\r\n\r\nconst enhance = connect(\r\n    ({ board }) => board,\r\n    { getResults }\r\n)\r\n\r\nclass LeaderBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentPage: 1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { getResults } = this.props;\r\n\r\n        getResults();\r\n    }\r\n\r\n    clickPage(page) {\r\n        this.setState(() => {\r\n            return { currentPage: page.selected + 1 };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { currentPage } = this.state;\r\n        const { results } = this.props;\r\n        const pageCount = results.length % 10 === 0 ? results.length / 10 : Math.floor(results.length / 10) + 1;\r\n\r\n        return(\r\n            <div className=\"leader-board\">\r\n                <ListGroup className=\"leader-board__list\">\r\n                    {results.reverse()\r\n                        .slice(((currentPage - 1) * 10), (currentPage * 10))\r\n                        .map(result => \r\n                            <ListGroup.Item key={result.id} variant=\"success\" className=\"leader-board__item\">\r\n                                <span>{result.winner}</span>\r\n                                <span>{result.date}</span>\r\n                            </ListGroup.Item>)\r\n                    }\r\n                </ListGroup>\r\n                {results.length > 10 && <ReactPaginate\r\n                                            pageCount={pageCount}\r\n                                            pageRangeDisplayed={3}\r\n                                            marginPagesDisplayed={1}\r\n                                            previousLabel={'Назад'}\r\n                                            nextLabel={'Следующая'}\r\n                                            onPageChange={(page) => this.clickPage(page)}\r\n                                            containerClassName={'board-pagination'}\r\n                                            previousClassName={'pagination__button'}\r\n                                            nextClassName={'pagination__button pagination__button--next'}\r\n                                            disabledClassName={'pagination__button--disabled'}\r\n                                            pageClassName={'pagination__page'}\r\n                                            pageLinkClassName={'pagination__page-link'}\r\n                                            activeLinkClassName={'pagination__page-link--active'}\r\n                                        />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default enhance(LeaderBoard);","import { GAME_MODE,\r\n         CHANGE_NAME,\r\n         SET_GAME_CONFIG,\r\n         SECTION_CHANGE,\r\n         GAME_OVER } from '../actions/game';\r\n\r\nconst initState = {\r\n    mode: null,\r\n    userName: '',\r\n    error: null,\r\n    message: \"Let's play?\",\r\n    delay: null,\r\n    gameSchema: [],\r\n    gameIsOn: null,\r\n    winner: ''\r\n}\r\n\r\nconst game = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case GAME_MODE:\r\n            return { ...state, mode: action.mode };\r\n\r\n        case CHANGE_NAME:\r\n            return { ...state, userName: action.value };\r\n\r\n        case SET_GAME_CONFIG:\r\n            if (action.config === undefined) {\r\n                return { ...state, error: 'Please, select game mode' };\r\n            }\r\n\r\n            if (action.userName === undefined || action.userName === '') {\r\n                return { ...state, error: 'Please, enter your name' };\r\n            }\r\n\r\n            const { field, delay } = action.config;\r\n            \r\n            // create game field schema\r\n            let gameSchema = [];\r\n            for (let i = 0; i < field; i++) {\r\n                let arr = [];\r\n                \r\n                for (let j = 0; j < field; j++) {\r\n                    arr.push('.');\r\n                }\r\n                \r\n                gameSchema.push(arr);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                message: 'Game start!',\r\n                delay,\r\n                gameSchema,\r\n                gameIsOn: true\r\n            };\r\n\r\n        case SECTION_CHANGE:\r\n            return {\r\n                ...state,\r\n                gameSchema: action.newSchema\r\n            }\r\n\r\n        case GAME_OVER:\r\n            return {\r\n                ...state,\r\n                message: `${action.winner} won!`,\r\n                gameIsOn: false,\r\n                winner: action.winner\r\n            }\r\n\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nexport default game;","import { SET_RESULTS } from '../actions/board';\r\n\r\nconst initState = {\r\n    results: []\r\n}\r\n\r\nconst board = (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_RESULTS:\r\n            return { results: action.results };\r\n\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nexport default board;","import { combineReducers } from 'redux';\r\nimport game from './game';\r\nimport board from './board';\r\n\r\nconst rootReducer = combineReducers({\r\n    game,\r\n    board\r\n});\r\n\r\nexport default rootReducer;","import axios from 'axios';\r\nimport { put, select, takeEvery } from 'redux-saga/effects';\r\nimport { GET_GAME_CONFIG, setGameConfig, GAME_OVER } from '../actions/game';\r\nimport { GET_RESULTS, setResults } from '../actions/board';\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(GET_GAME_CONFIG, gameWorker);\r\n    yield takeEvery(GAME_OVER, gameOver);\r\n    yield takeEvery(GET_RESULTS, boardWorker);\r\n}\r\n\r\nfunction* gameWorker() {\r\n    const { mode, userName } = yield select(store => store.game);\r\n    const difficult = yield axios.get('https://starnavi-frontend-test-task.herokuapp.com/game-settings');\r\n    yield put(setGameConfig(difficult.data[mode], userName));\r\n}\r\n\r\nfunction* gameOver() {\r\n    const { winner } = yield select(store => store.game);\r\n\r\n    if (winner !== 'Nobody') {\r\n        const date = new Date();\r\n        const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\r\n        const hours = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\r\n        const dateAndTime = `${hours}:${minutes}; ${date.getDate()}.${date.getMonth()}.${date.getFullYear()}`;\r\n        \r\n        yield axios.post('https://starnavi-frontend-test-task.herokuapp.com/winners', {\r\n            \"winner\": winner,\r\n            \"date\": dateAndTime\r\n        });\r\n    }\r\n\r\n    yield boardWorker();\r\n}\r\n\r\nfunction* boardWorker() {\r\n    const boardData = yield axios.get('https://starnavi-frontend-test-task.herokuapp.com/winners');\r\n    yield put(setResults(boardData.data));\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from '../reducers/rootReducer';\r\nimport createSagaMiddlware from 'redux-saga';\r\n\r\nimport { sagaWatcher } from '../sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddlware();\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(sagaWatcher);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport PlayingField from 'components/playing-field/PlayingField';\nimport LeaderBoard from 'components/leader-board/LeaderBoard';\n\nimport store from 'redux/store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"game-dots\">\n        <PlayingField />\n        <LeaderBoard />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}